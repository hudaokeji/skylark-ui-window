{"version":3,"sources":["WindowManager.js"],"names":["define","skylark","langx","browser","datax","eventer","noder","geom","velm","$","plugins","windows","Window","WindowManager","Emitter","inherit","klassName","init","options","this","initialize","findWindowByID","id","returnValue","each","index","window","console","log","arguments","destroyWindow","window_handle","_this","returnVal","close","splice","resortWindows","closeWindow","setIndex","setFocused","focused_window","focusedWindowIndex","getBlocker","windowHandle","setActive","push","sendToBack","indexOf","unshift","elements","container","addClass","getContainer","setNextFocused","length","addWindow","window_object","getElement","on","event","getWindowTab","remove","setWindowTab","getTitle","find","blocker","blink","getSticky","scrollTo","position","top","append","setManager","createWindow","window_options","final_options","mixin","windowTemplate","template","newWindow"],"mappings":"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","file":"../WindowManager.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./windows\",\r\n  \"./Window\"\r\n],function(skylark,langx,browser,datax,eventer,noder,geom,velm,$,plugins,windows,Window){\r\n\r\n\r\n    var WindowManager = langx.Emitter.inherit({\r\n        klassName: \"WindowManager\",\r\n\r\n        init : function(options) {\r\n            this.windows = [];\r\n            options = options || {};\r\n            this.initialize(options);\r\n            return this;\r\n        },\r\n\r\n        findWindowByID : function(id) {\r\n            var returnValue = null;\r\n            langx.each(this.windows, function(index, window) {\r\n                console.log(arguments);\r\n                if (window.id === id) {\r\n                    returnValue = window;\r\n                }\r\n            });\r\n            return returnValue;\r\n        },\r\n\r\n        destroyWindow : function(window_handle) {\r\n            var _this = this;\r\n            var returnVal = false;\r\n            langx.each(this.windows, function(index, window) {\r\n                if (window === window_handle) {\r\n                    window_handle.close();\r\n                    _this.windows.splice(index, 1);\r\n                    _this.resortWindows();\r\n                    returnVal = true;\r\n                }\r\n            });\r\n            return returnVal;\r\n        },\r\n\r\n        closeWindow : function(window_handle) {\r\n            this.destroyWindow(window_handle);\r\n        },\r\n\r\n        resortWindows : function() {\r\n            var startZIndex = 900;\r\n            langx.each(this.windows, function(index, window) {\r\n\r\n                window.setIndex(startZIndex + index);\r\n            });\r\n        },\r\n\r\n        setFocused : function(focused_window) {\r\n            var focusedWindowIndex;\r\n            while (focused_window.getBlocker()) {\r\n                focused_window = focused_window.getBlocker();\r\n            }\r\n            langx.each(this.windows, function(index, windowHandle) {\r\n                windowHandle.setActive(false);\r\n                if (windowHandle === focused_window) {\r\n                    focusedWindowIndex = index;\r\n                }\r\n            });\r\n            this.windows.push(this.windows.splice(focusedWindowIndex, 1)[0]);\r\n            focused_window.setActive(true);\r\n            this.resortWindows();\r\n\r\n        },\r\n\r\n        sendToBack : function(window) {\r\n            var windowHandle = this.windows.splice(this.windows.indexOf(window), 1)[0];\r\n            this.windows.unshift(windowHandle);\r\n            this.resortWindows();\r\n            return true;\r\n        },\r\n\r\n\r\n        initialize : function(options) {\r\n            this.options = options;\r\n            this.elements = {};\r\n\r\n            if (this.options.container) {\r\n                this.elements.container = $(this.options.container);\r\n                this.elements.container.addClass('window-pane');\r\n            }\r\n        },\r\n\r\n        getContainer : function() {\r\n            var returnVal;\r\n            if (this.elements && this.elements.container) {\r\n                returnVal = this.elements.container;\r\n            }\r\n            return returnVal;\r\n        },\r\n\r\n        setNextFocused : function() {\r\n            this.setFocused(this.windows[this.windows.length - 1]);\r\n        },\r\n\r\n        addWindow : function(window_object) {\r\n            var _this = this;\r\n            window_object.getElement().on('focused', function(event) {\r\n                _this.setFocused(window_object);\r\n            });\r\n            window_object.getElement().on('close', function() {\r\n                _this.destroyWindow(window_object);\r\n                if (window_object.getWindowTab()) {\r\n                    window_object.getWindowTab().remove();\r\n                }\r\n\r\n            });\r\n\r\n            window_object.on('bsw.restore', function() {\r\n                _this.resortWindows();\r\n            });\r\n\r\n            if (this.options.container) {\r\n                window_object.setWindowTab($('<span class=\"label label-default\">' + window_object.getTitle() + '<button class=\"close\">x</button></span>'));\r\n                window_object.getWindowTab().find('.close').on('click', function(event) {\r\n                    var blocker = window_object.getBlocker();\r\n                    if (!blocker) {\r\n                        window_object.close();\r\n                    } else {\r\n                        blocker.blink();\r\n                    }\r\n\r\n                });\r\n                window_object.getWindowTab().on('click', function(event) {\r\n                    var blocker = window_object.getBlocker();\r\n                    if (!blocker) {\r\n                        _this.setFocused(window_object);\r\n                        if (window_object.getSticky()) {\r\n                            window.scrollTo(0, window_object.getElement().position().top);\r\n                        }\r\n                    } else {\r\n                        blocker.blink();\r\n                    }\r\n                });\r\n\r\n                $(this.options.container).append(window_object.getWindowTab());\r\n            }\r\n\r\n            this.windows.push(window_object);\r\n            window_object.setManager(this);\r\n            this.setFocused(window_object);\r\n            return window_object;\r\n        },\r\n\r\n        createWindow : function(window_options) {\r\n            var _this = this;\r\n            var final_options = langx.mixin({},window_options);\r\n            if (this.options.windowTemplate && !final_options.template) {\r\n                final_options.template = this.options.windowTemplate;\r\n            }\r\n\r\n            var newWindow = new Window(final_options.template,final_options);\r\n\r\n\r\n            return this.addWindow(newWindow);\r\n        }\r\n\r\n    });\r\n\r\n    Window.WindowManager = WindowManager;\r\n\r\n    return windows.WindowManager = WindowManager;\r\n});"]}